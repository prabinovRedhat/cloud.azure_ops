---
- name: Test role cloud.azure_ops.azure_manage_resource_group without locking var
  block:
    # Test: Create Resource Group without locking
    - name: Create Resource Group without locking
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        azure_manage_resource_group_operation: create
        azure_manage_resource_group_name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_region: "{{ azure_manage_resource_group_region_test }}"
        azure_manage_resource_group_tags: "{{ azure_manage_resource_group_tags_test }}"

    - name: Get Resource Group info
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_manage_resource_group_name_test }}"
      register: rg_info

    - name: Assert that Resource Group was created without locking
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 1
          - rg_info.resourcegroups[0].name == azure_manage_resource_group_name_test
          - rg_info.resourcegroups[0].location == azure_manage_resource_group_region_test
          - rg_info.resourcegroups[0].tags == azure_manage_resource_group_tags_test

    # Test: Delete Resource Group without locking
    - name: Delete Resource Group without locking
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        azure_manage_resource_group_operation: delete
        azure_manage_resource_group_name: "{{ azure_manage_resource_group_name_test }}"

    - name: Get Resource Group
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_manage_resource_group_name_test }}"
      register: rg_info

    - name: Assert that Resource Group was deleted without locking
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 0

  always:
    - name: Delete Resource Group
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_force_delete_nonempty: true
        state: absent

- name: Test role cloud.azure_ops.azure_manage_resource_group with locking var
  block:
    # Test: Create Resource Group with locking
    - name: Create Resource Group with locking
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        azure_manage_resource_group_operation: create
        azure_manage_resource_group_name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_region: "{{ azure_manage_resource_group_region_test }}"
        azure_manage_resource_group_tags: "{{ azure_manage_resource_group_tags_test }}"
        azure_manage_resource_group_lock_resource_group: true

    - name: Get Resource Group
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_manage_resource_group_name_test }}"
      register: rg_info

    - name: Assert that Resource Group was created with locking
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 1
          - rg_info.resourcegroups[0].name == azure_manage_resource_group_name_test
          - rg_info.resourcegroups[0].location == azure_manage_resource_group_region_test
          - rg_info.resourcegroups[0].tags == azure_manage_resource_group_region_test
          - azure_manage_resource_group_lock_resource_group == true

    # Test: Try to delete Locked Resource Group without force
    - name: Try to delete Locked Resource Group without force
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        azure_manage_resource_group_operation: delete
        azure_manage_resource_group_name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_force_delete_locked: false
      ignore_errors: yes
      register: delete_result

    - name: Check if deletion without force failed
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 1
          - delete_result.failed == true

    # Test: Delete Locked Resource Group with force delete 
    - name: Delete Locked Resource Group with force delete 
      ansible.builtin.include_role:
        name: cloud.azure_ops.azure_manage_resource_group
      vars:
        azure_manage_resource_group_operation: delete
        azure_manage_resource_group_name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_force_delete_locked: true

    - name: Get Resource Group
      azure.azcollection.azure_rm_resourcegroup_info:
        name: "{{ azure_manage_resource_group_name_test }}"
      register: rg_info

    - name: Assert that Resource Group was deleted with force delete when locked
      ansible.builtin.assert:
        that:
          - rg_info.resourcegroups | length == 0

  always:
    - name: Delete Resource Group
      azure.azcollection.azure_rm_resourcegroup:
        name: "{{ azure_manage_resource_group_name_test }}"
        azure_manage_resource_group_force_delete_nonempty: true
        azure_manage_resource_group_force_delete_locked: true
        state: absent